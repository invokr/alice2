#!/usr/bin/env bash

# Script variables
command=""
verbose=0

# Global constants
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
TMP="$DIR/../.tmp/"
PROTODIR="$DIR/../proto/"
SRCDIR="$DIR/../src/alice2/"

# Differnt packets, their file, type and identifier
declare -A PACKETS=(
    ['CDemo']="demo.proto"
    ['CCLCMsg_']="netmessages.proto"
    ['CSVCMsg_']="netmessages.proto"
    ['CNETMsg_']="networkbasetypes.proto"
    ['CUserMessage']="usermessages.proto"
    ['CUserMsg_']="usermessages.proto"
    ['CDOTAUserMsg_']="dota_usermessages.proto"
)

declare -A PACKET_TYPE=(
    ['CDemo']="PACKET_DEM"
    ['CCLCMsg_']="PACKET_NET"
    ['CSVCMsg_']="PACKET_NET"
    ['CNETMsg_']="PACKET_NET"
    ['CUserMessage']="PACKET_USR"
    ['CUserMsg_']="PACKET_USR"
    ['CDOTAUserMsg_']="PACKET_USR"
)

declare -A ENUMS=(
    ['CDemo']="DEM_"
    ['CCLCMsg_']="clc_"
    ['CSVCMsg_']="svc_"
    ['CNETMsg_']="net_"
    ['CUserMessage']="UM_"
    ['CUserMsg_']="UM_"
    ['CDOTAUserMsg_']="DOTA_UM_"
)

# Show help
show_help() {
cat << EOF
Usage: ${0##*/} [-vh] [command]

    -v                      Verbose mode
    -h                      Show this output

Commands:

    update-proto            Update protocol buffer files
    gen-proto               Generates packet listing
EOF
}

# Download protobuf files
update_proto() {
    if [ ! -e $TMP ]; then
        mkdir $TMP
    fi

    cd $TMP

    if [ ! -e ".git" ]; then
        git init
        git remote add -f origin "https://github.com/SteamRE/SteamKit.git"
        git config core.sparsecheckout true

        echo "Resources/Protobufs/dota/" >> .git/info/sparse-checkout
        echo "Resources/Protobufs/dota_s2/" >> .git/info/sparse-checkout
    fi

    #git pull origin master
    cp -pa Resources/Protobufs/dota/*.proto "$PROTODIR/Source1"
    for f in "$PROTODIR/Source1/"*.proto; do
        echo 'package alice.ps1;'$'\n'"$(cat $f)" > $f

        # To make this work under *bsd and linux, we need to use a tmp file
        sed -E "s/^(.[	]{0,}[repeated|optional|required]{1,}.\.)/\1alice\.ps1\./g" $f > $f.tmp
        rm $f && mv $f.tmp $f
    done

    cp -pa Resources/Protobufs/dota_s2/client/*.proto "$PROTODIR/Source2"
    for f in "$PROTODIR/Source2/"*.proto; do
        echo 'package alice.ps2;'$'\n'"$(cat $f)" > $f
        sed -E "s/^(.[	]{0,}[repeated|optional|required]{1,}.\.)/\1alice\.ps2\./g" $f > $f.tmp
        rm $f && mv $f.tmp $f
    done
}

# Fixes protobuf header includes
fix_proto_includes() {
    for f in "$SRCDIR/proto/source1/"*.pb.h; do
        sed -E "s/^(#ifndef PROTOBUF_.*$)/\1_ps1/g" $f > $f.tmp
        sed -E "s/^(#define PROTOBUF_.*$)/\1_ps1/g" $f.tmp > $f
        rm $f.tmp
    done

    for f in "$SRCDIR/proto/source2/"*.pb.h; do
        sed -E "s/^(#ifndef PROTOBUF_.*$)/\1_ps2/g" $f > $f.tmp
        sed -E "s/^(#define PROTOBUF_.*$)/\1_ps2/g" $f.tmp > $f
        rm $f.tmp
    done
}

# Generates proto includes
gen_proto() {
    if [ ! -e "$PROTODIR/Source1/demo.proto" ]; then
        echo "Error: Can't find demo.proto, did you run update-proto?"
        exit 1
    fi

    # packets for source1 and source2
    S1PACKETS=0
    S2PACKETS=0

    echo "// This file is generated by running /bin/alice gen-proto" > ${SRCDIR}/packets.s1.hpp.inline
    echo "// This file is generated by running /bin/alice gen-proto" > ${SRCDIR}/packets.s2.hpp.inline

    for packet in "${!PACKETS[@]}"; do
        REGEX="print \$1 if /^message\s$packet(.*)\s\{/"

        objects=$( perl -nle "${REGEX}" $PROTODIR/Source1/${PACKETS[$packet]} )
        objects_arr=($objects);
        echo "p->resize(${PACKET_TYPE[$packet]}, ${#objects_arr[@]});" >> ${SRCDIR}/packets.s1.hpp.inline

        for object in $objects; do
            S1PACKETS=$[S1PACKETS + 1]

            REGEX2="print \$1 if /^.*${ENUMS[$packet]}$object\s=\s(.*);/"
            ENUM=$(perl -nle "${REGEX2}" $PROTODIR/Source1/${PACKETS[$packet]})

            if [ $ENUM ]; then
                #if [ ${verbose} == 1 ]; then echo "Adding $object - $ENUM"; fi
                echo "p->add<ps1::$packet$object>(${PACKET_TYPE[$packet]}, $ENUM);" >> ${SRCDIR}/packets.s1.hpp.inline
            else
                if [ ${verbose} == 1 ]; then echo "Can't find enum for $object"; fi
                echo "// p->add<ps1::$packet$object>(${PACKET_TYPE[$packet]}, <undef>);" >> ${SRCDIR}/packets.s1.hpp.inline
            fi
        done

        objects=$( perl -nle "${REGEX}" $PROTODIR/Source2/${PACKETS[$packet]} )
        objects_arr=($objects);
        echo "p->resize(${PACKET_TYPE[$packet]}, ${#objects_arr[@]});" >> ${SRCDIR}/packets.s2.hpp.inline

        for object in $objects; do
            S2PACKETS=$[S2PACKETS + 1]

            REGEX2="print \$1 if /^.*${ENUMS[$packet]}$object\s=\s(.*);/"
            ENUM=$(perl -nle "${REGEX2}" $PROTODIR/Source2/${PACKETS[$packet]})

            if [ $ENUM ]; then
                #if [ ${verbose} == 1 ]; then echo "Adding $object - $ENUM"; fi
                echo "p->add<ps2::$packet$object>(${PACKET_TYPE[$packet]}, $ENUM);" >> ${SRCDIR}/packets.s2.hpp.inline
            else
                if [ ${verbose} == 1 ]; then echo "Can't find enum for $object"; fi
                echo "// p->add<ps2::$packet$object>(${PACKET_TYPE[$packet]}, <undef>);" >> ${SRCDIR}/packets.s2.hpp.inline
            fi
        done
    done

    # Add additional packets that don't fit the common format
    echo "p->add<ps1::CDemoPacket>(PACKET_DEM, ps1::DEM_SignonPacket);" >> ${SRCDIR}/packets.s1.hpp.inline
    echo "p->add<ps2::CDemoPacket>(PACKET_DEM, ps2::DEM_SignonPacket);" >> ${SRCDIR}/packets.s2.hpp.inline

    echo "Packages added: [ $S1PACKETS | $S2PACKETS ]";
}

# Get all options
while getopts "hve:" opt; do
    case "$opt" in
        h)
            show_help
            exit 0
            ;;
        v)  verbose=1
            ;;
        '?')
            show_help >&2
            exit 1
            ;;
    esac
done
shift "$((OPTIND-1))" # Shift off the options and optional --.

# Get command
if [ $# == 0 ]; then
    echo "Missing command"
    show_help
    exit 1
else
    command=$1
fi

case "$command" in
    update-proto)
        update_proto
        ;;
    gen-proto)
        gen_proto
        ;;
    fix-proto-includes)
        fix_proto_includes
        ;;
    *)
        echo "Unkown command: $command"
        show_help
        exit 1
        ;;
esac
